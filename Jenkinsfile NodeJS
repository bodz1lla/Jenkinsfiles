pipeline {
  agent {
    label 'any'
  }
options {
   disableConcurrentBuilds()
 }
parameters{
   choice(choices: 'dev\nqa\nstage', description: '', name: 'SERVER')
   choice(choices: 'develop\nqa\nstage', description: '', name: 'YARN_ENV')
 }
  tools {
    nodejs 'NODEVERSION'
  }

  environment {

    side_user = "user"
    PROJECT_server = "PROJECT.${SERVER}.example.com"
    PROJECT_dev = "PROJECT.example.com"
    PROJECT_qa = "PROJECT.example.com"
    PROJECT_stage = "PROJECT.example.com"
    dest_dir = "example_dir"
    deploy_workspace = "${WORKSPACE}"
  } // end environment

  stages {
    stage('Build') {
        steps {
            script {
                dir('example/path/frontend') {
                    sh """
                    yarn install
                    yarn run ${YARN_ENV}:build"""
                }  
            } //end of script
        } // end steps
    } // end stage build
    stage('Deploy'){
            
        steps {

            script {
                zip dir: 'example/path', glob: '', zipFile: 'frontend.zip'
                sshagent(['user']) {
                    sh "ssh ${PROJECT_server} rm -rf exampledir/*"
                    sh "scp ${deploy_workspace}/frontend.zip ${side_user}@${PROJECT_server}:${dest_dir}"
                    sh "ssh ${PROJECT_server} unzip -o ${dest_dir}/frontend.zip -d ${dest_dir}/"
                }
            } //end of script
        } // end steps
      } // end stage deploy
  }// end stages
  post {
    always {
      cleanWs cleanWhenFailure: false, cleanWhenUnstable: false
    }

  } // end post
} // end pipeline
